!function(n){var t={};function e(c){if(t[c])return t[c].exports;var g=t[c]={i:c,l:!1,exports:{}};return n[c].call(g.exports,g,g.exports,e),g.l=!0,g.exports}e.m=n,e.c=t,e.d=function(n,t,c){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:c})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var c=Object.create(null);if(e.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var g in n)e.d(c,g,function(t){return n[t]}.bind(null,g));return c},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=2)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval("/**\n*   EasyStar.js\n*   github.com/prettymuchbryce/EasyStarJS\n*   Licensed under the MIT license.\n*\n*   Implementation By Bryce Neal (@prettymuchbryce)\n**/\n\nvar EasyStar = {}\nvar Instance = __webpack_require__(6);\nvar Node = __webpack_require__(5);\nvar Heap = __webpack_require__(4);\n\nconst CLOSED_LIST = 0;\nconst OPEN_LIST = 1;\n\nmodule.exports = EasyStar;\n\nvar nextInstanceId = 1;\n\nEasyStar.js = function() {\n    var STRAIGHT_COST = 1.0;\n    var DIAGONAL_COST = 1.4;\n    var syncEnabled = false;\n    var pointsToAvoid = {};\n    var collisionGrid;\n    var costMap = {};\n    var pointsToCost = {};\n    var directionalConditions = {};\n    var allowCornerCutting = true;\n    var iterationsSoFar;\n    var instances = {};\n    var instanceQueue = [];\n    var iterationsPerCalculation = Number.MAX_VALUE;\n    var acceptableTiles;\n    var diagonalsEnabled = false;\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array|Number} tiles An array of numbers that represent\n    * which tiles in your grid should be considered\n    * acceptable, or \"walkable\".\n    **/\n    this.setAcceptableTiles = function(tiles) {\n        if (tiles instanceof Array) {\n            // Array\n            acceptableTiles = tiles;\n        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {\n            // Number\n            acceptableTiles = [tiles];\n        }\n    };\n\n    /**\n    * Enables sync mode for this EasyStar instance..\n    * if you're into that sort of thing.\n    **/\n    this.enableSync = function() {\n        syncEnabled = true;\n    };\n\n    /**\n    * Disables sync mode for this EasyStar instance.\n    **/\n    this.disableSync = function() {\n        syncEnabled = false;\n    };\n\n    /**\n     * Enable diagonal pathfinding.\n     */\n    this.enableDiagonals = function() {\n        diagonalsEnabled = true;\n    }\n\n    /**\n     * Disable diagonal pathfinding.\n     */\n    this.disableDiagonals = function() {\n        diagonalsEnabled = false;\n    }\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array} grid The collision grid that this EasyStar instance will read from.\n    * This should be a 2D Array of Numbers.\n    **/\n    this.setGrid = function(grid) {\n        collisionGrid = grid;\n\n        //Setup cost map\n        for (var y = 0; y < collisionGrid.length; y++) {\n            for (var x = 0; x < collisionGrid[0].length; x++) {\n                if (!costMap[collisionGrid[y][x]]) {\n                    costMap[collisionGrid[y][x]] = 1\n                }\n            }\n        }\n    };\n\n    /**\n    * Sets the tile cost for a particular tile type.\n    *\n    * @param {Number} The tile type to set the cost for.\n    * @param {Number} The multiplicative cost associated with the given tile.\n    **/\n    this.setTileCost = function(tileType, cost) {\n        costMap[tileType] = cost;\n    };\n\n    /**\n    * Sets the an additional cost for a particular point.\n    * Overrides the cost from setTileCost.\n    *\n    * @param {Number} x The x value of the point to cost.\n    * @param {Number} y The y value of the point to cost.\n    * @param {Number} The multiplicative cost associated with the given point.\n    **/\n    this.setAdditionalPointCost = function(x, y, cost) {\n        if (pointsToCost[y] === undefined) {\n            pointsToCost[y] = {};\n        }\n        pointsToCost[y][x] = cost;\n    };\n\n    /**\n    * Remove the additional cost for a particular point.\n    *\n    * @param {Number} x The x value of the point to stop costing.\n    * @param {Number} y The y value of the point to stop costing.\n    **/\n    this.removeAdditionalPointCost = function(x, y) {\n        if (pointsToCost[y] !== undefined) {\n            delete pointsToCost[y][x];\n        }\n    }\n\n    /**\n    * Remove all additional point costs.\n    **/\n    this.removeAllAdditionalPointCosts = function() {\n        pointsToCost = {};\n    }\n\n    /**\n    * Sets a directional condition on a tile\n    *\n    * @param {Number} x The x value of the point.\n    * @param {Number} y The y value of the point.\n    * @param {Array.<String>} allowedDirections A list of all the allowed directions that can access\n    * the tile.\n    **/\n    this.setDirectionalCondition = function(x, y, allowedDirections) {\n        if (directionalConditions[y] === undefined) {\n            directionalConditions[y] = {};\n        }\n        directionalConditions[y][x] = allowedDirections;\n    };\n\n    /**\n    * Remove all directional conditions\n    **/\n    this.removeAllDirectionalConditions = function() {\n        directionalConditions = {};\n    };\n\n    /**\n    * Sets the number of search iterations per calculation.\n    * A lower number provides a slower result, but more practical if you\n    * have a large tile-map and don't want to block your thread while\n    * finding a path.\n    *\n    * @param {Number} iterations The number of searches to prefrom per calculate() call.\n    **/\n    this.setIterationsPerCalculation = function(iterations) {\n        iterationsPerCalculation = iterations;\n    };\n\n    /**\n    * Avoid a particular point on the grid,\n    * regardless of whether or not it is an acceptable tile.\n    *\n    * @param {Number} x The x value of the point to avoid.\n    * @param {Number} y The y value of the point to avoid.\n    **/\n    this.avoidAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] === undefined) {\n            pointsToAvoid[y] = {};\n        }\n        pointsToAvoid[y][x] = 1;\n    };\n\n    /**\n    * Stop avoiding a particular point on the grid.\n    *\n    * @param {Number} x The x value of the point to stop avoiding.\n    * @param {Number} y The y value of the point to stop avoiding.\n    **/\n    this.stopAvoidingAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] !== undefined) {\n            delete pointsToAvoid[y][x];\n        }\n    };\n\n    /**\n    * Enables corner cutting in diagonal movement.\n    **/\n    this.enableCornerCutting = function() {\n        allowCornerCutting = true;\n    };\n\n    /**\n    * Disables corner cutting in diagonal movement.\n    **/\n    this.disableCornerCutting = function() {\n        allowCornerCutting = false;\n    };\n\n    /**\n    * Stop avoiding all additional points on the grid.\n    **/\n    this.stopAvoidingAllAdditionalPoints = function() {\n        pointsToAvoid = {};\n    };\n\n    /**\n    * Find a path.\n    *\n    * @param {Number} startX The X position of the starting point.\n    * @param {Number} startY The Y position of the starting point.\n    * @param {Number} endX The X position of the ending point.\n    * @param {Number} endY The Y position of the ending point.\n    * @param {Function} callback A function that is called when your path\n    * is found, or no path is found.\n    * @return {Number} A numeric, non-zero value which identifies the created instance. This value can be passed to cancelPath to cancel the path calculation.\n    *\n    **/\n    this.findPath = function(startX, startY, endX, endY, callback) {\n        // Wraps the callback for sync vs async logic\n        var callbackWrapper = function(result) {\n            if (syncEnabled) {\n                callback(result);\n            } else {\n                setTimeout(function() {\n                    callback(result);\n                });\n            }\n        }\n\n        // No acceptable tiles were set\n        if (acceptableTiles === undefined) {\n            throw new Error(\"You can't set a path without first calling setAcceptableTiles() on EasyStar.\");\n        }\n        // No grid was set\n        if (collisionGrid === undefined) {\n            throw new Error(\"You can't set a path without first calling setGrid() on EasyStar.\");\n        }\n\n        // Start or endpoint outside of scope.\n        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 ||\n        startX > collisionGrid[0].length-1 || startY > collisionGrid.length-1 ||\n        endX > collisionGrid[0].length-1 || endY > collisionGrid.length-1) {\n            throw new Error(\"Your start or end point is outside the scope of your grid.\");\n        }\n\n        // Start and end are the same tile.\n        if (startX===endX && startY===endY) {\n            callbackWrapper([]);\n            return;\n        }\n\n        // End point is not an acceptable tile.\n        var endTile = collisionGrid[endY][endX];\n        var isAcceptable = false;\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (endTile === acceptableTiles[i]) {\n                isAcceptable = true;\n                break;\n            }\n        }\n\n        if (isAcceptable === false) {\n            callbackWrapper(null);\n            return;\n        }\n\n        // Create the instance\n        var instance = new Instance();\n        instance.openList = new Heap(function(nodeA, nodeB) {\n            return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();\n        });\n        instance.isDoneCalculating = false;\n        instance.nodeHash = {};\n        instance.startX = startX;\n        instance.startY = startY;\n        instance.endX = endX;\n        instance.endY = endY;\n        instance.callback = callbackWrapper;\n\n        instance.openList.push(coordinateToNode(instance, instance.startX,\n            instance.startY, null, STRAIGHT_COST));\n\n        var instanceId = nextInstanceId ++;\n        instances[instanceId] = instance;\n        instanceQueue.push(instanceId);\n        return instanceId;\n    };\n\n    /**\n     * Cancel a path calculation.\n     *\n     * @param {Number} instanceId The instance ID of the path being calculated\n     * @return {Boolean} True if an instance was found and cancelled.\n     *\n     **/\n    this.cancelPath = function(instanceId) {\n        if (instanceId in instances) {\n            delete instances[instanceId];\n            // No need to remove it from instanceQueue\n            return true;\n        }\n        return false;\n    };\n\n    /**\n    * This method steps through the A* Algorithm in an attempt to\n    * find your path(s). It will search 4-8 tiles (depending on diagonals) for every calculation.\n    * You can change the number of calculations done in a call by using\n    * easystar.setIteratonsPerCalculation().\n    **/\n    this.calculate = function() {\n        if (instanceQueue.length === 0 || collisionGrid === undefined || acceptableTiles === undefined) {\n            return;\n        }\n        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {\n            if (instanceQueue.length === 0) {\n                return;\n            }\n\n            if (syncEnabled) {\n                // If this is a sync instance, we want to make sure that it calculates synchronously.\n                iterationsSoFar = 0;\n            }\n\n            var instanceId = instanceQueue[0];\n            var instance = instances[instanceId];\n            if (typeof instance == 'undefined') {\n                // This instance was cancelled\n                instanceQueue.shift();\n                continue;\n            }\n\n            // Couldn't find a path.\n            if (instance.openList.size() === 0) {\n                instance.callback(null);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            var searchNode = instance.openList.pop();\n\n            // Handles the case where we have found the destination\n            if (instance.endX === searchNode.x && instance.endY === searchNode.y) {\n                var path = [];\n                path.push({x: searchNode.x, y: searchNode.y});\n                var parent = searchNode.parent;\n                while (parent!=null) {\n                    path.push({x: parent.x, y:parent.y});\n                    parent = parent.parent;\n                }\n                path.reverse();\n                var ip = path;\n                instance.callback(ip);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            searchNode.list = CLOSED_LIST;\n\n            if (searchNode.y > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    0, -1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y-1));\n            }\n            if (searchNode.x < collisionGrid[0].length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    1, 0, STRAIGHT_COST * getTileCost(searchNode.x+1, searchNode.y));\n            }\n            if (searchNode.y < collisionGrid.length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    0, 1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y+1));\n            }\n            if (searchNode.x > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    -1, 0, STRAIGHT_COST * getTileCost(searchNode.x-1, searchNode.y));\n            }\n            if (diagonalsEnabled) {\n                if (searchNode.x > 0 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, -1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, 1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y+1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, -1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x > 0 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, 1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y+1));\n                    }\n                }\n            }\n\n        }\n    };\n\n    // Private methods follow\n    var checkAdjacentNode = function(instance, searchNode, x, y, cost) {\n        var adjacentCoordinateX = searchNode.x+x;\n        var adjacentCoordinateY = searchNode.y+y;\n\n        if ((pointsToAvoid[adjacentCoordinateY] === undefined ||\n             pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === undefined) &&\n            isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {\n            var node = coordinateToNode(instance, adjacentCoordinateX,\n                adjacentCoordinateY, searchNode, cost);\n\n            if (node.list === undefined) {\n                node.list = OPEN_LIST;\n                instance.openList.push(node);\n            } else if (searchNode.costSoFar + cost < node.costSoFar) {\n                node.costSoFar = searchNode.costSoFar + cost;\n                node.parent = searchNode;\n                instance.openList.updateItem(node);\n            }\n        }\n    };\n\n    // Helpers\n    var isTileWalkable = function(collisionGrid, acceptableTiles, x, y, sourceNode) {\n        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];\n        if (directionalCondition) {\n            var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y)\n            var directionIncluded = function () {\n                for (var i = 0; i < directionalCondition.length; i++) {\n                    if (directionalCondition[i] === direction) return true\n                }\n                return false\n            }\n            if (!directionIncluded()) return false\n        }\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (collisionGrid[y][x] === acceptableTiles[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * -1, -1 | 0, -1  | 1, -1\n     * -1,  0 | SOURCE | 1,  0\n     * -1,  1 | 0,  1  | 1,  1\n     */\n    var calculateDirection = function (diffX, diffY) {\n        if (diffX === 0 && diffY === -1) return EasyStar.TOP\n        else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT\n        else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT\n        else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT\n        else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM\n        else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT\n        else if (diffX === -1 && diffY === 0) return EasyStar.LEFT\n        else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT\n        throw new Error('These differences are not valid: ' + diffX + ', ' + diffY)\n    };\n\n    var getTileCost = function(x, y) {\n        return (pointsToCost[y] && pointsToCost[y][x]) || costMap[collisionGrid[y][x]]\n    };\n\n    var coordinateToNode = function(instance, x, y, parent, cost) {\n        if (instance.nodeHash[y] !== undefined) {\n            if (instance.nodeHash[y][x] !== undefined) {\n                return instance.nodeHash[y][x];\n            }\n        } else {\n            instance.nodeHash[y] = {};\n        }\n        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);\n        if (parent!==null) {\n            var costSoFar = parent.costSoFar + cost;\n        } else {\n            costSoFar = 0;\n        }\n        var node = new Node(parent,x,y,costSoFar,simpleDistanceToTarget);\n        instance.nodeHash[y][x] = node;\n        return node;\n    };\n\n    var getDistance = function(x1,y1,x2,y2) {\n        if (diagonalsEnabled) {\n            // Octile distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            if (dx < dy) {\n                return DIAGONAL_COST * dx + dy;\n            } else {\n                return DIAGONAL_COST * dy + dx;\n            }\n        } else {\n            // Manhattan distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            return (dx + dy);\n        }\n    };\n}\n\nEasyStar.TOP = 'TOP'\nEasyStar.TOP_RIGHT = 'TOP_RIGHT'\nEasyStar.RIGHT = 'RIGHT'\nEasyStar.BOTTOM_RIGHT = 'BOTTOM_RIGHT'\nEasyStar.BOTTOM = 'BOTTOM'\nEasyStar.BOTTOM_LEFT = 'BOTTOM_LEFT'\nEasyStar.LEFT = 'LEFT'\nEasyStar.TOP_LEFT = 'TOP_LEFT'\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.js\nvar eventemitter3 = __webpack_require__(0);\nvar eventemitter3_default = /*#__PURE__*/__webpack_require__.n(eventemitter3);\n\n// CONCATENATED MODULE: ./src/node.js\n\nconst Matter = window.Matter;\n\n/**\n* @class\n* A MindMap node\n*\n* @param {string} text - Text content of the node.\n* @param {number} x -  X position (from top left corner) of the node.\n* @param {number} y - Y position (from top left corner) of the node.\n* @param {boolean} center - If true, the node will be positioned relative to its center instead of its top left corner. Default is false\n* @param {number} maxPosX - Optional maxium X position of the canvas. Prevents the node from spawning outside the canvas.\n* @param {number} maxPosY - Optional maxium Y position of the canvas. Prevents the node from spawning outside the canvas.\n*/\nfunction Node(mindMap, text, x=0, y=0, center, maxPosX, maxPosY) {\n\tconst createjs = window.createjs;\n\tconst Matter = window.Matter;\n\n\tthis.mindMap = mindMap\n\tthis.connections = [];\n\tthis.rigidbody = null;\n\tthis.shapes = {\n\t\tcontainer: null,\n\t\tbackground: null,\n\t\ttext: null\n\t}\n\tthis.padding = {\n\t\tx: 32,\n\t\ty:16\n\t};\n\tthis.margin = {\n\t\tx: 6,\n\t\ty: 6\n\t}\n\tthis.size = {\n\t\twidth: -1,\n\t\theight: -1,\n\t\twidthNoMargin: -1,\n\t\theightNoMargin: -1,\n\t}\n\tthis.position = { // position in canvas space (origin at top left corner)\n\t\tx: -1,\n\t\ty: -1\n\t}\n\tthis.lastRigidbodyPosition = { // position in physics space (origin at center)\n\t\tx: -1,\n\t\ty: -1\n\t}\n\tthis.maxVelocty = {\n\t\tx: 5,\n\t\ty: 5\n\t}\n\n\tthis.connectionActive = false;\n\tthis.dragging = false;\n\tthis.colliding = false;\n\n\tthis.init(text, x, y, center, maxPosX, maxPosY);\n}\nNode.prototype = new eventemitter3_default.a();\n\nNode.prototype.init = function init(text, x, y, center=false, maxPosX, maxPosY) {\n\tthis.shapes.container = new createjs.Container();\n\tthis.shapes.background = new createjs.Shape();\n\tthis.shapes.text = new createjs.Text(text, '16px Arial');\n\n\tthis.size.widthNoMargin = this.shapes.text.getMeasuredWidth() + (this.padding.x * 2);\n\tthis.size.heightNoMargin = this.shapes.text.getMeasuredHeight() + (this.padding.y * 2);\n\tthis.size.width = this.size.widthNoMargin + (this.margin.x * 2);\n\tthis.size.height = this.size.heightNoMargin + (this.margin.y * 2);\n\n\tthis.shapes.text.x = this.size.widthNoMargin/2 - this.shapes.text.getMeasuredWidth()/2;\n\tthis.shapes.text.y = this.size.heightNoMargin/2 - this.shapes.text.getMeasuredHeight()/2;\n\n\tthis.shapes.background.graphics\n\t.beginFill('white')\n\t.beginStroke('black')\n\t.drawRoundRect(0, 0, this.size.widthNoMargin, this.size.heightNoMargin, 4);\n\n\tif(center === true) {\n\t\tx = x - this.size.width/2;\n\t\ty = y - this.size.height/2;\n\t}\n\n\t// prevent node from spawning out of bounds\n\tif(x < 0) {\n\t\tx = 0;\n\t}\n\tif(y < 0) {\n\t\ty = 0;\n\t}\n\n\tif(maxPosX && x + this.size.width >= maxPosX) {\n\t\tx = maxPosX - this.size.width;\n\t}\n\tif(maxPosY && y + this.size.height >= maxPosY) {\n\t\ty = maxPosY - this.size.height;\n\t}\n\n\n\tconst rigidbodyPosition = this.calcRigidbodyPos(x, y);\n\n\tthis.shapes.container.x = x;\n\tthis.shapes.container.y = y;\n\tthis.rigidbody = Matter.Bodies.rectangle(\n\t\trigidbodyPosition.x,\n\t\trigidbodyPosition.y,\n\t\tthis.size.width,\n\t\tthis.size.height,\n\t\t{ frictionAir: 0.2 }\n\t);\n\n\tthis.position = this.calcNodePos();\n\tthis.shapes.container.addChild(this.shapes.background, this.shapes.text);\n\n\tthis.shapes.container.on('mousedown', this.mouseDown.bind(this));\n\tthis.shapes.container.on('mouseover', this.mouseOver.bind(this));\n\tthis.shapes.container.on('mouseout', this.mouseOut.bind(this));\n\tthis.shapes.container.on('pressmove', this.pressMove.bind(this));\n\tthis.shapes.container.on('pressup', this.pressUp.bind(this));\n\n\tMatter.Events.on(this.rigidbody, 'collisionActive', this.collisionActive.bind(this));\n\tMatter.Events.on(this.rigidbody, 'collisionEnd', this.collisionEnd.bind(this));\n}\n\n/**\n* @function\n* Calculate the current global position (top left corner) of the node with its margins included\n*/\nNode.prototype.calcNodePos = function calcPosition() {\n\treturn {\n\t\tx: this.rigidbody.position.x - this.size.width/2,\n\t\ty: this.rigidbody.position.y - this.size.height/2\n\t}\n}\n\n/**\n* @function\n* Calculate the correct position (top left corner) of the nodes' container, based on a position in physics space.\n* rigidbody/physics position is relative to center - canvas/shape position is relative to top-left corner\n*\n* @param {boolean} withMargins - If true, will add the nodes' current margins to the position.\n* @returns {object} An object with structure {x: number, y: number}. x and y are coridantes in canvas space.\n*/\nNode.prototype.calcShapePos = function calcShapePos(x, y, withMargins=true) {\n\tif(withMargins === true) {\n\t\tx += this.margin.x;\n\t\ty += this.margin.y;\n\t}\n\n\treturn {\n\t\tx: x - this.size.width/2,\n\t\ty: y - this.size.height/2,\n\t}\n}\n\n/**\n* @function\n* Calculate the correct position (center) of the nodes' rigidbody based on a position in canvas space.\n* rigidbody/physics position is relative to center - canvas/shape position is relative to top-left corner\n*\n* @returns {object} An object with structure {x: number, y: number}. x and y are coridantes in physics space.\n*/\nNode.prototype.calcRigidbodyPos = function calcRigidbodyPos(x, y) {\n\treturn {\n\t\tx: x + this.size.width/2,\n\t\ty: y + this.size.height/2\n\t}\n}\n\nNode.prototype.didMove = function didMove() {\n\t\tif(Math.floor(this.rigidbody.position.x) !== Math.floor(this.lastRigidbodyPosition.x)) {\n\t\t\treturn true;\n\t\t}\n\t\telse if(Math.floor(this.rigidbody.position.y) !== Math.floor(this.lastRigidbodyPosition.y)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n}\n\n\nNode.prototype.updateConnections = function updateConnections(pathfind=true) {\n\tfor(const connection of this.connections) {\n\t\tconnection.update(pathfind);\n\t}\n}\n\n/**\n* @function\n* To be called on every physics tick by the MindMap object that this node belongs to.\n*/\nNode.prototype.tick = function tick() {\n\tconst didMove = this.didMove();\n\tlet connectionsUpdated = false;\n\tif(this.dragging) {\n\t\t// update connections while beaing draged\n\t\tthis.updateConnections(false);\n\t\tconnectionsUpdated = true;\n\t}\n\telse if(this.colliding === true && didMove === true) {\n\t\t// update connections if a collision caused movement\n\t\tthis.updateConnections(false);\n\t\tthis.connectionsUpdated = true;\n\t}\n\n\tif(didMove === false && connectionsUpdated === false) {\n\t\treturn;\n\t}\n\n\n\tconst shapePosition = this.calcShapePos(this.rigidbody.position.x, this.rigidbody.position.y, true);\n\tthis.shapes.container.x = shapePosition.x;\n\tthis.shapes.container.y = shapePosition.y;\n\n\tthis.position = this.calcNodePos();\n\n\tthis.lastRigidbodyPosition.x = this.rigidbody.position.x;\n\tthis.lastRigidbodyPosition.y = this.rigidbody.position.y;\n\tthis.emit('nodeMoved', this);\n}\n\n/**\n* @function\n* Move a node to a position in canvas space. The top left corner of the node will be at the position.\n* @param {boolean=} center - If true, will center the node on the position.\n*/\nNode.prototype.move = function move(x, y, center=false) {\n\tif(center === true) {\n\t\tx -= this.size.width/2;\n\t\ty -= this.size.height/2;\n\t}\n\n\tMatter.Body.setPosition(this.rigidbody, this.calcRigidbodyPos(x, y));\n}\n\nNode.prototype.mouseDown = function mouseDown(event) {\n\tif(event.nativeEvent.ctrlKey === true) {\n\t\tthis.connectionActive = true;\n\t\tthis.emit('nodeClick', this);\n\t}\n}\nNode.prototype.mouseOver = function mouseOver(event) {\n\tthis.emit('nodeMouseEnter', this);\n}\nNode.prototype.mouseOut = function mouseOut(event) {\n\tthis.emit('nodeMouseExit', this);\n}\nNode.prototype.pressMove = function pressMove(event) {\n\tif(this.connectionActive === true) {\n\t\tthis.emit('nodeConnectionDrag', this, event.stageX, event.stageY);\n\t}\n\telse {\n\t\tthis.emit('nodeDrag');\n\t\tthis.move(event.stageX, event.stageY, true);\n\t\tthis.shapes.text.alpha = 0.5;\n\t\tthis.dragging = true;\n\t}\n}\nNode.prototype.pressUp = function pressUp(event) {\n\tthis.shapes.text.alpha = 1;\n\tthis.dragging = false;\n\tthis.emit('nodeUp', this);\n\n\tif(this.connectionActive) {\n\t\tthis.connectionActive = false;\n\t}\n}\n\nNode.prototype.collisionActive = function collisionActive() {\n\tthis.colliding = true;\n}\nNode.prototype.collisionStart = function collisionStart() {\n\tthis.colliding = true;\n}\n\nNode.prototype.collisionEnd = function collisionEnd() {\n\tthis.colliding = false;\n}\n\n/* harmony default export */ var src_node = (Node);\n\n// EXTERNAL MODULE: ./node_modules/easystarjs/src/easystar.js\nvar easystar = __webpack_require__(1);\nvar easystar_default = /*#__PURE__*/__webpack_require__.n(easystar);\n\n// CONCATENATED MODULE: ./src/connection.js\n\nconst connection_createjs = window.createjs;\n\n/**\n* @class\n* An instance of a single connection\n* @param {object} grid - An instance of a Grid object\n*/\nfunction Connection(grid) {\n\tthis.grid = grid;\n\tthis.line = new connection_createjs.Shape();\n\tthis.easystar = new easystar_default.a.js();\n\n\tthis.pathId;\n\tthis.intervalId;\n\tthis.nodeA;\n\tthis.nodeB;\n\n\tthis.easystar.enableDiagonals();\n\tthis.easystar.enableCornerCutting();\n\tthis.easystar.setIterationsPerCalculation(1500);\n\n\twindow.setInterval(this.easystar.calculate, 10); // perform a batch of path calculations on some interval\n}\n\nConnection.prototype.clear = function clear() {\n\tthis.line.graphics.clear();\n}\nConnection.prototype.beginStroke = function beginStroke() {\n\tthis.clear();\n\tthis.line.graphics.beginStroke('green').setStrokeStyle(4).moveTo(0, 0);\n}\nConnection.prototype.endStroke = function endStroke() {\n\tthis.line.graphics.endStroke();\n}\n\n/**\n* @function\n* Make a direct connection to a point.\n*/\nConnection.prototype.directLineTo = function directLineTo(x, y) {\n\tconst localTarget = this.line.globalToLocal(x, y);\n\n\tthis.beginStroke();\n\tthis.line.graphics.lineTo(localTarget.x, localTarget.y);\n\tthis.endStroke();\n}\n\n/**\n* @function\n*\n* Attempt to find a path to a point that avoids intersecting nodes.\n* If no path can be found, a direct line to that point will be drawn instead.\n*/\nConnection.prototype.pathfindTo = function pathfindTo(x, y) {\n\tconst globalStartPoint = this.line.localToGlobal(0, 0);\n\n\tglobalStartPoint.x = this.grid.scaleDown(Math.floor(globalStartPoint.x));\n\tglobalStartPoint.y = this.grid.scaleDown(Math.floor(globalStartPoint.y));\n\tx = this.grid.scaleDown(Math.floor(x));\n\ty = this.grid.scaleDown(Math.floor(y));\n\n\tconst acceptableTiles = [1, this.nodeA.shapes.container.id];\n\tif(this.nodeB) {\n\t\tacceptableTiles.push(this.nodeB.shapes.container.id);\n\t}\n\tif(this.pathId) {\n\t\tthis.easystar.cancelPath(this.pathId);\n\t}\n\n\tthis.easystar.setGrid(this.grid.getGrid());\n\tthis.easystar.setAcceptableTiles(acceptableTiles);\n\n\tthis.pathId = this.easystar.findPath(globalStartPoint.x, globalStartPoint.y, x, y, (path) => {\n\t\tthis.beginStroke();\n\n\t\tif(path === null) {\n\t\t\tthis.directLineTo(this.grid.scaleUp(x), this.grid.scaleUp(y));\n\t\t\tconsole.warn(`Could not find connection path from x:${globalStartPoint.x}, y:${globalStartPoint.y} to x:${x}, y:${y}`)\n\t\t\treturn;\n\t\t}\n\n\t\tfor(const location of path) {\n\t\t\tconst localTarget = this.line.globalToLocal(this.grid.scaleUp(location.x), this.grid.scaleUp(location.y));\n\t\t\tthis.line.graphics.lineTo(localTarget.x, localTarget.y);\n\t\t}\n\n\t\tthis.endStroke();\n\t});\n}\n\n/**\n* @function\n*\n* Make a connection to a point.\n* @param {boolean} pathfind - If true, will attempt to find a path to that point that avoids intersecting nodes.\n*/\nConnection.prototype.move = function move(x, y, pathfind=false) {\n\tif(pathfind === false) {\n\t\tthis.directLineTo(x, y)\n\t}\n\telse {\n\t\tthis.pathfindTo(x, y);\n\t}\n}\n\n/**\n* @function\n* Begin a connection at a node.\n*/\nConnection.prototype.start = function start(nodeA) {\n\tthis.nodeA = nodeA;\n\tthis.line.x = nodeA.shapes.container.x + nodeA.size.width/2;\n\tthis.line.y = nodeA.shapes.container.y + nodeA.size.height/2;\n}\n\n/**\n* @function\n* End a connection at a node.\n* @param {boolean} pathfind - If true, will attempt to find a path to the end node that avoids intersecting other nodes.\n*/\nConnection.prototype.end = function end(node, pathfind=true) {\n\tthis.nodeB = node;\n\tconst xPos = node.shapes.container.x + node.size.width/2;\n\tconst yPos = node.shapes.container.y + node.size.height/2;\n\tthis.move(xPos, yPos, pathfind);\n}\n\n/**\n* @function\n* Update a connection.\n* @param {boolean} pathfind - If true, will attempt to find a connection path that avoids intersecting other nodes.\n*/\nConnection.prototype.update = function(pathfind=true) {\n\tthis.start(this.nodeA);\n\tthis.end(this.nodeB, pathfind);\n}\n\n/* harmony default export */ var connection = (Connection);\n\n// CONCATENATED MODULE: ./src/grid.js\n/**\r\n* @class\r\n* Generates and modifies grids for pathfinding use\r\n*\r\n* @param {[object]} nodes - A reference to an array of Node objects in the grid\r\n* @param {number} width - Width of the grid/canvas (nodes located outside of this will cause an error)\r\n* @param {number} height - Height of the grid/canvas (nodes located outside of this will cause an error)\r\n* @param {number} scaleFactor - How much to scale the grid resolution down by in order to improve performance. Larger numbers and smaller grids result in less accuracy but better performance. Should be a number between 0 and 1.\r\n*/\r\nfunction Grid(nodes, width, height, scaleFactor=1) {\r\n\tthis.nodes = nodes\r\n\tthis.size = { width, height };\r\n\tthis.scaleFactor = scaleFactor;\r\n\tthis.internalGrid = [];\r\n\tthis.nodesMoved = true;\r\n}\r\n\r\nGrid.prototype.scaleDown = function scaleDown(val, floor=true) {\r\n\tconst newValue = val * this.scaleFactor;\r\n\tif(floor === true) {\r\n\t\treturn Math.floor(newValue);\r\n\t}\r\n\telse {\r\n\t\treturn Math.round(newValue);\r\n\t}\r\n}\r\n\r\nGrid.prototype.scaleUp = function scaleUp(val, floor=true) {\r\n\tconst newValue = val / this.scaleFactor;\r\n\tif(floor === true) {\r\n\t\treturn Math.floor(newValue);\r\n\t}\r\n\telse {\r\n\t\treturn Math.round(newValue);\r\n\t}\r\n}\r\n\r\nGrid.prototype.buildBaseGrid = function buildBaseGrid() {\r\n\tthis.internalGrid = [];\r\n\tfor(let y = 0; y < this.scaleDown(this.size.height, false); y++) {\r\n\t\tconst row = [];\r\n\t\tfor(let x = 0; x < this.scaleDown(this.size.width, false); x++) {\r\n\t\t\trow.push(1);\r\n\t\t}\r\n\t\tthis.internalGrid.push(row);\r\n\t}\r\n}\r\n\r\nGrid.prototype.setNodeBoundaries = function setNodeBoundaries() {\r\n\tfor(const node of this.nodes) {\r\n\t\tconst id = node.shapes.container.id;\r\n\r\n\t\tlet xPos = this.scaleDown(node.position.x);\r\n\t\tlet yPos = this.scaleDown(node.position.y);\r\n\r\n\t\tconst size = {\r\n\t\t\twidth: this.scaleDown(node.size.width),\r\n\t\t\theight: this.scaleDown(node.size.height)\r\n\t\t};\r\n\r\n\t\tif(xPos < 1) {\r\n\t\t\t// hack to fix nodes whose scaled down positions end up as negative numbers\r\n\t\t\txPos = 0;\r\n\t\t}\r\n\t\telse if(xPos + size.width >= this.internalGrid[0].length) {\r\n\t\t\t// hack to fix nodes on the edge and moving into the canvas\r\n\t\t\txPos = this.internalGrid[0].length - size.width - 1;\r\n\t\t}\r\n\r\n\t\tif(yPos < 1) {\r\n\t\t\tyPos = 0;\r\n\t\t}\r\n\t\telse if(yPos + size.height >= this.internalGrid.length) {\r\n\t\t\tyPos = this.internalGrid.length - size.height - 1;\r\n\t\t}\r\n\r\n\t\t// set boundaries for top and bottom side of the node\r\n\t\tfor(let x = xPos; x <= xPos + size.width; x++) {\r\n\t\t\tthis.internalGrid[yPos][x] = id;\r\n\t\t\tthis.internalGrid[yPos + size.height][x] = id;\r\n\t\t}\r\n\r\n\t\t// set boundaries for left and right side of the node\r\n\t\tfor(let y = yPos; y <= yPos + size.height; y++) {\r\n\t\t\tthis.internalGrid[y][xPos] = id;\r\n\t\t\tthis.internalGrid[y][xPos + size.width] = id;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nGrid.prototype.getGrid = function getGrid() {\r\n\tif(this.nodesMoved === false) {\r\n\t\treturn this.internalGrid;\r\n\t}\r\n\r\n\tthis.buildBaseGrid();\r\n\tthis.setNodeBoundaries();\r\n\r\n\tthis.nodesMoved = false;\r\n\treturn this.internalGrid;\r\n}\r\n\r\nGrid.prototype.setNodeMoved = function setNodeMoved() {\r\n\tthis.nodeMoved = true;\r\n}\r\n\r\n/* harmony default export */ var src_grid = (Grid);\r\n\n// CONCATENATED MODULE: ./src/mindMap.js\n\n\n\n\n\nconst mindMap_createjs = window.createjs;\nconst mindMap_Matter = window.Matter;\n\nfunction randomId() {\n\treturn Math.random().toString(36).substring(2, 4) + Math.random().toString(36).substring(2, 3);\n}\n\n/**\n* @class\n* Mind map application\n*\n* @param {string} canvasId - Id of the HTML canvas object to run the MindMap on\n* @param {number} gridResolution - Resolution of the pathfinding grid. Canvases with a size greater than 500x500 should\n* have a grid resolution of less than 1. (to decrease the grid size - more performance at cost of less accuracy\n*/\nfunction MindMap(canvasId = 'js-mindmap-canvas', gridResolution = 1) {\n\tthis.stage = new mindMap_createjs.Stage(canvasId);\n\tthis.engine = mindMap_Matter.Engine.create();\n\n\tthis.nodeContainer = new mindMap_createjs.Container();\n\tthis.connectionContainer = new mindMap_createjs.Container();\n\n\tif(!this.stage.canvas) {\n\t\tthrow new Error(`MindMap unable to initialize because canvas element with id ${canvasId} could not be found`);\n\t}\n\n\tthis.nodes = [];\n\tthis.grid = new src_grid(this.nodes, this.stage.canvas.width, this.stage.canvas.height, gridResolution);\n\tthis.boundaries = {\n\t\ttop: null,\n\t\tbuttom: null,\n\t\tleft: null,\n\t\tright: null\n\t}\n\n\tthis.pendingConnection = {\n\t\tstartNode: null,\n\t\tendNode: null,\n\t\tconnection: null\n\t}\n\n\tthis.settings = {\n\t\tmouseOverFrequency: 1000\n\t};\n\n\tthis.init();\n}\nMindMap.prototype = new eventemitter3_default.a();\n\nMindMap.prototype.init = function init() {\n\tthis.engine.world.gravity.y = 0;\n\tmindMap_Matter.Engine.run(this.engine);\n\n\tthis.stage.addChild(this.connectionContainer, this.nodeContainer);\n\tthis.stage.enableDOMEvents(true);\n\tthis.stage.enableMouseOver(this.mouseOverFrequency);\n\n\tconst rootNode = this.createNode(this, 'Root', 1, 1, false, this.stage.canvas.width, this.stage.canvas.height);\n\tthis.nodes.push(rootNode);\n\n\tconst boundarySize = 60;\n\tconst boundaryMargin = 0;\n\n\tthis.boundaries.top = new mindMap_Matter.Bodies.rectangle(\n\t\tthis.stage.canvas.width/2,\n\t\t(0 - (boundarySize/2)) + boundaryMargin,\n\t\tthis.stage.canvas.width,\n\t\tboundarySize,\n\t\t{ isStatic: true }\n\t);\n\tthis.boundaries.bottom = new mindMap_Matter.Bodies.rectangle(\n\t\tthis.stage.canvas.width/2,\n\t\t(this.stage.canvas.height + (boundarySize/2)) - boundaryMargin,\n\t\tthis.stage.canvas.width,\n\t\tboundarySize,\n\t\t{ isStatic: true }\n\t);\n\tthis.boundaries.left = new mindMap_Matter.Bodies.rectangle(\n\t\t(0 - (boundarySize/2)) + boundaryMargin,\n\t\tthis.stage.canvas.height/2,\n\t\tboundarySize,\n\t\tthis.stage.canvas.height,\n\t\t{ isStatic: true }\n\t);\n\tthis.boundaries.right = new mindMap_Matter.Bodies.rectangle(\n\t\t(this.stage.canvas.width + (boundarySize/2)) - boundaryMargin,\n\t\tthis.stage.canvas.height/2,\n\t\tboundarySize,\n\t\tthis.stage.canvas.height,\n\t\t{ isStatic: true }\n\t);\n\n\tmindMap_Matter.World.add(this.engine.world, this.boundaries.top);\n\tmindMap_Matter.World.add(this.engine.world, this.boundaries.bottom);\n\tmindMap_Matter.World.add(this.engine.world, this.boundaries.left);\n\tmindMap_Matter.World.add(this.engine.world, this.boundaries.right);\n\n\tmindMap_Matter.Events.on(this.engine, 'afterUpdate', this.onTick.bind(this));\n\tmindMap_Matter.Events.on(this.engine, 'collisionActive', this.collisionActive);\n\tmindMap_Matter.Events.on(this.engine, 'collisionStart', this.collisionStart);\n\tmindMap_Matter.Events.on(this.engine, 'collisionEnd', this.collisionEnd);\n\tthis.stage.on('stagemousedown', this.onClick.bind(this));\n}\n\nMindMap.prototype.onTick = function onUpdate() {\n\tthis.stage.update();\n\tfor(const node of this.nodes) {\n\t\tnode.tick();\n\t}\n}\n\nMindMap.prototype.createNode = function(...args) {\n\tconst newNode = new src_node(...args);\n\tthis.nodes.push(newNode);\n\tthis.nodeContainer.addChild(newNode.shapes.container);\n\tmindMap_Matter.World.add(this.engine.world, newNode.rigidbody);\n\n\tnewNode.on('nodeMoved', this.onNodeMoved, this);\n\tnewNode.on('nodeClick', this.onNodeClick, this);\n\tnewNode.on('nodeMouseEnter', this.onNodeMouseEnter, this);\n\tnewNode.on('nodeMouseExit', this.onNodeMouseExit, this);\n\tnewNode.on('nodeConnectionDrag', this.onNodeConnectionDrag, this);\n\tnewNode.on('nodeUp', this.onNodeUp, this);\n\n\tthis.grid.nodesMoved = true;\n\tsetTimeout(() => {\n\t\t// give the nodes enough time to resolve their position if they are created inside of another body\n\t\t// (nodes created inside or partialy inside of another body may not detect the collision and will not update their connections on their own)\n\t\tfor(const node of this.nodes) {\n\t\t\tnode.updateConnections();\n\t\t}\n\t}, 200);\n\n\treturn newNode;\n}\n\nMindMap.prototype.onClick = function onClick(event) {\n\tif(event.relatedTarget) {\n\t\treturn;\n\t}\n\n\tthis.nodes.push(this.createNode(this, randomId(), event.stageX, event.stageY, true, this.stage.canvas.width, this.stage.canvas.height) );\n}\n\n\nMindMap.prototype.collisionActive = function collisionActive(event) {\n\tfor(const pair of event.pairs) {\n\t\tmindMap_Matter.Events.trigger(pair.bodyA, 'collisionActive');\n\t\tmindMap_Matter.Events.trigger(pair.bodyB, 'collisionActive');\n\t}\n}\n\nMindMap.prototype.collisionStart = function collisionStart(event) {\n\tfor(const pair of event.pairs) {\n\t\tmindMap_Matter.Events.trigger(pair.bodyA, 'collisionStart');\n\t\tmindMap_Matter.Events.trigger(pair.bodyB, 'collisionStart');\n\t}\n}\n\nMindMap.prototype.collisionEnd = function collisionEnd(event) {\n\tfor(const pair of event.pairs) {\n\t\tmindMap_Matter.Events.trigger(pair.bodyA, 'collisionEnd');\n\t\tmindMap_Matter.Events.trigger(pair.bodyB, 'collisionEnd');\n\t}\n}\n\n\nMindMap.prototype.onNodeMoved = function onNodeMoved() {\n\tthis.grid.nodesMoved = true;\n}\n\nMindMap.prototype.onNodeClick = function onNodeClick(node) {\n\tconst newConnection = new connection(this.grid);\n\tthis.connectionContainer.addChild(newConnection.line);\n\tnewConnection.start(node);\n\n\tthis.pendingConnection.startNode = node;\n\tthis.pendingConnection.connection = newConnection;\n}\n\nMindMap.prototype.onNodeConnectionDrag = function onNodeConnectionDrag(node, x, y) {\n\tif(this.pendingConnection.endNode) {\n\t\treturn;\n\t}\n\n\tthis.pendingConnection.connection.move(x, y);\n}\n\nMindMap.prototype.onNodeMouseEnter = function onNodeMouseEnter(node) {\n\tif(!this.pendingConnection.startNode || this.pendingConnection.startNode === node) {\n\t\treturn;\n\t}\n\n\tthis.pendingConnection.endNode = node;\n\tthis.pendingConnection.connection.end(node, true);\n}\n\nMindMap.prototype.onNodeMouseExit = function onNodeMouseExit(node) {\n\tif(node === this.pendingConnection.endNode) {\n\t\tthis.pendingConnection.endNode = null;\n\t}\n}\n\nMindMap.prototype.onNodeUp = function nodeUp() {\n\tfor(const node of this.nodes) {\n\t\tnode.updateConnections(true);\n\t}\n\n\tif(!this.pendingConnection.connection) {\n\t\treturn;\n\t}\n\n\tif(this.pendingConnection.startNode && this.pendingConnection.endNode) {\n\t\tthis.pendingConnection.startNode.connections.push(this.pendingConnection.connection);\n\t\tthis.pendingConnection.endNode.connections.push(this.pendingConnection.connection);\n\t}\n\telse {\n\t\tthis.pendingConnection.connection.clear();\n\t\tthis.connectionContainer.removeChild(this.pendingConnection.connection.line);\n\t}\n\n\tthis.pendingConnection.startNode = null;\n\tthis.pendingConnection.endNode = null;\n\tthis.pendingConnection.connection = null;\n}\n\n\n/* harmony default export */ var mindMap = (MindMap);\n\n// CONCATENATED MODULE: ./src/index.js\n\r\nwindow.MindMap = mindMap;\r\n\r\n(function () {\r\n\t// run a demo canvas if one exists\r\n\tconst map = new mindMap('js-mindmap-canvas-demo-ABC123', 0.25);\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (true) {\n      return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(3);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGVhcC9pbmRleC5qcz8xNzVhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2hlYXAnKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n")},function(module,exports){eval("/**\n* A simple Node that represents a single tile on the grid.\n* @param {Object} parent The parent node.\n* @param {Number} x The x position on the grid.\n* @param {Number} y The y position on the grid.\n* @param {Number} costSoFar How far this node is in moves*cost from the start.\n* @param {Number} simpleDistanceToTarget Manhatten distance to the end point.\n**/\nmodule.exports = function(parent, x, y, costSoFar, simpleDistanceToTarget) {\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    this.costSoFar = costSoFar;\n    this.simpleDistanceToTarget = simpleDistanceToTarget;\n\n    /**\n    * @return {Number} Best guess distance of a cost using this node.\n    **/\n    this.bestGuessDistance = function() {\n        return this.costSoFar + this.simpleDistanceToTarget;\n    }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWFzeXN0YXJqcy9zcmMvbm9kZS5qcz8yMzA5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxVQUFVLE9BQU87QUFDakIsVUFBVSxPQUFPO0FBQ2pCLFVBQVUsT0FBTztBQUNqQixVQUFVLE9BQU87QUFDakIsVUFBVSxPQUFPO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBBIHNpbXBsZSBOb2RlIHRoYXQgcmVwcmVzZW50cyBhIHNpbmdsZSB0aWxlIG9uIHRoZSBncmlkLlxuKiBAcGFyYW0ge09iamVjdH0gcGFyZW50IFRoZSBwYXJlbnQgbm9kZS5cbiogQHBhcmFtIHtOdW1iZXJ9IHggVGhlIHggcG9zaXRpb24gb24gdGhlIGdyaWQuXG4qIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSB5IHBvc2l0aW9uIG9uIHRoZSBncmlkLlxuKiBAcGFyYW0ge051bWJlcn0gY29zdFNvRmFyIEhvdyBmYXIgdGhpcyBub2RlIGlzIGluIG1vdmVzKmNvc3QgZnJvbSB0aGUgc3RhcnQuXG4qIEBwYXJhbSB7TnVtYmVyfSBzaW1wbGVEaXN0YW5jZVRvVGFyZ2V0IE1hbmhhdHRlbiBkaXN0YW5jZSB0byB0aGUgZW5kIHBvaW50LlxuKiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhcmVudCwgeCwgeSwgY29zdFNvRmFyLCBzaW1wbGVEaXN0YW5jZVRvVGFyZ2V0KSB7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMuY29zdFNvRmFyID0gY29zdFNvRmFyO1xuICAgIHRoaXMuc2ltcGxlRGlzdGFuY2VUb1RhcmdldCA9IHNpbXBsZURpc3RhbmNlVG9UYXJnZXQ7XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn0gQmVzdCBndWVzcyBkaXN0YW5jZSBvZiBhIGNvc3QgdXNpbmcgdGhpcyBub2RlLlxuICAgICoqL1xuICAgIHRoaXMuYmVzdEd1ZXNzRGlzdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29zdFNvRmFyICsgdGhpcy5zaW1wbGVEaXN0YW5jZVRvVGFyZ2V0O1xuICAgIH1cbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n")},function(module,exports){eval("/**\n * Represents a single instance of EasyStar.\n * A path that is in the queue to eventually be found.\n */\nmodule.exports = function() {\n    this.pointsToAvoid = {};\n    this.startX;\n    this.callback;\n    this.startY;\n    this.endX;\n    this.endY;\n    this.nodeHash = {};\n    this.openList;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWFzeXN0YXJqcy9zcmMvaW5zdGFuY2UuanM/NzczNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlcHJlc2VudHMgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgRWFzeVN0YXIuXG4gKiBBIHBhdGggdGhhdCBpcyBpbiB0aGUgcXVldWUgdG8gZXZlbnR1YWxseSBiZSBmb3VuZC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnBvaW50c1RvQXZvaWQgPSB7fTtcbiAgICB0aGlzLnN0YXJ0WDtcbiAgICB0aGlzLmNhbGxiYWNrO1xuICAgIHRoaXMuc3RhcnRZO1xuICAgIHRoaXMuZW5kWDtcbiAgICB0aGlzLmVuZFk7XG4gICAgdGhpcy5ub2RlSGFzaCA9IHt9O1xuICAgIHRoaXMub3Blbkxpc3Q7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n")}]);